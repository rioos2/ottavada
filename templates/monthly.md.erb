### First working day after 7th

Stable branch should be created after the 7th. The 7th is the last date to reliably get things in.

- [ ] Create the <%= version.picking_label %> group label if it doesn't exist: https://gitlab.com/groups/gitlab-org/labels/new
  - Title: `Pick into <%= version.to_minor %>`
  - Description:

    ```
    Merge requests to cherry-pick into the `<%= version.stable_branch %>` branch. Remove the label once picked.
    ```
  - Color: `#00c8ca`
- [ ] In `#development`:

    ```
    @channel

    I am about to create the `<%= version.stable_branch %>` branch. Everything merged into `master`
    after this point will go into next month's release. Only regression and security fixes
    will be cherry-picked into `<%= version.stable_branch %>`.

    Please ensure that merge requests have the correct milestone (`<%= version.to_minor %>` for this release)
    and the `Pick into <%= version.to_minor %>` label.

    From now on, please follow the "After the 7th" process:
    https://gitlab.com/gitlab-org/gitlab-ce/blob/master/PROCESS.md#after-the-7th
    ```
- [ ] Make sure the latest [CE to EE] on `master` branches is merged (it will reduce conflicts in the future). Ask in `#ce-to-ee` when in doubt.
- [ ] Create branch `<%= version.stable_branch %>` from CE `master` manually
- [ ] Create branch `<%= version.stable_branch(ee: true) %>` from EE `master` manually
- [ ] In Omnibus create both `<%= version.stable_branch %>` and `<%= version.stable_branch(ee: true) %>` from `master` manually
- [ ] Merge Gitlab CE into EE on stable branches following the [Merging a CE stable branch into its EE counterpart] guide
- [ ] Sync stable branches: CE, EE, and Omnibus to `dev`, CE and Omnibus to `github`
- [ ] Sync master branches to `dev` and `github`, as the CHANGELOG will be automatically updated on master during tagging
- [ ] If needed, sync tags for dependencies (`gitlab-shell`, `gitlab-workhorse`, `gitlab-pages`, `gitaly`) to `dev` and `github` (when applicable. Builds should fail if this is needed.)

#### RC1

- Follow the [Creating RC1] guide:
  - [ ] Create MR on CE master updating the "Installation from Source" guide, creating the "Update" guides
  - [ ] Create MR on EE master creating the "CE to EE" guides
  - [ ] Create MR on CE master updating the `.gitignore`, `.gitlab-ci.yml`, and `Dockerfile` templates
  - [ ] Create MR on CE master updating the dependencies license list
  - [ ] Ensure above MRs are merged and marked <%= version.picking_label %>
- Follow steps to create a release candidate
  - [ ] Create preparation MRs by following the [instructions in release-tools](https://gitlab.com/gitlab-org/release-tools/blob/master/doc/picking-into-merge-requests.md).
  - [ ] Cherry-pick changes into preparation MRs following their instructions
  - [ ] Cherry-pick remaining merge requests labeled <%= version.picking_label %> using this [Merged MRs list]
  - Check the following list of critical issues/MRs which are to be included in `<%= version.to_patch %>`. Ensure each has made both CE and EE
      - [ ] REFERENCE_TO_MR_TO_PICK
  - [ ] If you didn't merge CE into EE in the preparation branches, or if the CE stable branch had additional commits, merge CE `<%= version.stable_branch %>` into EE `<%= version.stable_branch(ee: true) %>` following the [Merging a CE stable branch into its EE counterpart] guide. (In general this should be unnecessary.)
  - [ ] Ensure builds are green on [Omnibus CE stable branch] and [Omnibus EE stable branch]
  - [ ] Sync stable branches: CE, EE, and Omnibus to `dev`, CE and Omnibus to `github`
  - [ ] Sync master branches to `dev` and `github`, as the CHANGELOG will be automatically updated on master during tagging
  - [ ] If needed, sync tags for dependencies (`gitlab-shell`, `gitlab-workhorse`, `gitlab-pages`, `gitaly`) to `dev` and `github` (when applicable. Builds should fail if this is needed.)
  - [ ] Check for any problematic migrations in EE (EE migrations include CE ones), and paste the diff in a snippet: `git diff LATEST_PATCH_TAG-ee..<%= version.stable_branch(ee: true) %> -- db/migrate db/post_migrate` =>
  - [ ] Tag the `<%= version.to_rc %>` version using the [`release` task]:

        ```sh
        # In the release-tools project:
        bundle exec rake "release[<%= version.to_rc %>]"
        ```
  - [ ] Check progress of [EE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(for_rc: 1, ee: true) %>) and [CE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(for_rc: 1) %>)
  - [ ] Get confirmation from a production team member to deploy staging. Use `!oncall prod` if needed to find who's on call.
  - [ ] On video call, [deploy] release [`<%= version.to_rc %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc %>.ee.0_amd64.deb) to [staging.gitlab.com]
        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e staging -v <%= version.to_rc %>.ee.0
        ```
  - [ ] Share the output of the migrations from the takeoff script in this issue via a snippet. Flag any migrations that take more than 5 minutes to run.
  - [ ] Make sure that the database migrations complete in a timely manner. If you see a migration taking too long in staging, stop right there and ping `@db-team` in Slack. What you're witnessing has the potential to take down production for a long time. The statement "Don't worry: it'll be faster in production" is a false myth that has been disproven every single time that this has happened in the past.
  - [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
  - [ ] Announce with an `@product-team` mention on the `#product` Slack channel: @product-team `<%= version.to_rc %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
  - [ ] Create an "RC1 QA Task" issue in the [gitlab-org/release/tasks](https://gitlab.com/gitlab-org/release/tasks) repo.
  - [ ] Wait for the RC1 QA Task deadline to pass.
  - [ ] Get confirmation from a production team member to deploy canary. Use `!oncall prod` if needed to find who's on call.
  - [ ] On video call, [deploy] release [`<%= version.to_rc %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc %>.ee.0_amd64.deb) to [canary.gitlab.com]
        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e canary -v <%= version.to_rc %>.ee.0
        ```
  - [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc %>` has been deployed to canary. Blog post draft: MERGE_REQUEST_URL
  - [ ] Wait for confirmation from [`@bjgopinath`](https://gitlab.com/bjgopinath) that testing succeeded on canary and the release can proceed
  - [ ] Get confirmation from a production team member to deploy production. Use `!oncall prod` if needed to find who's on call.
  - [ ] Publicly [announce the deployment] on Twitter and with the GitLab.com deploy alert banner in the `#production` channel
        ```
        !broadcast --start X:Y --end A:B "We are currently deploying GitLab EE <%= version.to_rc %>.
        For status updates, please follow https://twitter.com/GitLabStatus"
        ```
        * With downtime: 1 hour before
        ```
        !tweet "We will be deploying GitLab EE <%= version.to_rc %> starting at X:Y UTC, 15 mins of downtime expected"
        ```
        * Without downtime: 15 minutes before
        ```
        !tweet "We are about to deploy GitLab EE <%= version.to_rc %> starting at X:Y UTC"
        ```
  - [ ] On video call, [deploy] release [`<%= version.to_rc %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc %>.ee.0_amd64.deb) to GitLab.com
      ```sh
      # In the takeoff project:
      bin/takeoff-deploy -e production -v <%= version.to_rc %>.ee.0
      ```
  - [ ] Tweet in the `#production` channel that the deployment has finished:
      ```
      !tweet "GitLab EE <%= version.to_rc %> has been deployed."
      ```
  - [ ] Take notes of the time it took for the migrations to complete on the deployment to production.
      ```
      # On the takeoff repo
      bundle exec rake "follow_migrations[production]"
      ```
  - [ ] From the [build pipeline], [manually publish public packages]
  - [ ] Verify that packages appear on `packages.gitlab.com`: [EE & CE](https://packages.gitlab.com/app/gitlab/unstable/search?q=<%= version.to_rc %>)
  - [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
  - [ ] Post a [tweet about] the `<%= version.to_rc %>` release in the `#releases` channel:

    ```
    !tweet "GitLab <%= version.to_rc %> is available: https://packages.gitlab.com/gitlab/unstable
    This is a release candidate, we'll release <%= version.to_minor %> on the 22nd of this month."
    ```

#### QA

- [ ] Determine QA person and notify this person: MENTION_THIS_PERSON_HERE
- [ ] Do QA and fix anything coming out of it: LINK_TO_QA_ISSUE

### Anytime after RC1 but before 22nd

- [ ] Update the [blog post] `barometer section` with the migration types for this release, including the time they took to complete.
- [ ] Create another RC as needed.

Keep in mind that:

1. After feature freeze only regression and security fixes can be
cherry-picked into `<%= version.stable_branch %>`.
2. Last RC should point to the same commit as the final release.

**Copy-paste the tasks below for any other RCs (be sure to update the RC number).**

```
#### RC2

- [ ] Create preparation MRs by following the [instructions in release-tools](https://gitlab.com/gitlab-org/release-tools/blob/master/doc/picking-into-merge-requests.md).
- [ ] Cherry-pick changes into preparation MRs following their instructions
- [ ] Cherry-pick remaining merge requests labeled <%= version.picking_label %> using this [Merged MRs list]
- Check the following list of critical issues/MRs which are to be included in `<%= version.to_patch %>`. Ensure each has made both CE and EE
  - [ ] REFERENCE_TO_MR_TO_PICK
- Follow the [Creating subsequent RCs] guide for `<%= version.to_rc(2) %>`:
  - [ ] If you didn't merge CE into EE in the preparation branches, or if the CE stable branch had additional commits, merge CE `<%= version.stable_branch %>` into EE `<%= version.stable_branch(ee: true) %>` following the [Merging a CE stable branch into its EE counterpart] guide. (In general this should be unnecessary.)
  - [ ] Ensure builds are green on [Omnibus CE stable branch] and [Omnibus EE stable branch]
  - [ ] Sync stable branches: CE, EE, and Omnibus to `dev`, CE and Omnibus to `github`
  - [ ] Sync master branches to `dev` and `github`, as the CHANGELOG will be automatically updated on master during tagging
  - [ ] If needed, sync tags for dependencies (`gitlab-shell`, `gitlab-workhorse`, `gitlab-pages`, `gitaly`) to `dev` and `github` (when applicable. Builds should fail if this is needed.)
  - [ ] Check for any problematic migrations in EE (EE migrations include CE ones), and paste the diff in a snippet: `git diff v<%= version.to_rc %>-ee..<%= version.stable_branch(ee: true) %> -- db/migrate db/post_migrate` =>
  - [ ] Tag the `<%= version.to_rc(2) %>` version using the [`release` task]:

        ```sh
        # In the release-tools project:
        bundle exec rake "release[<%= version.to_rc(2) %>]"
        ```
- [ ] Check progress of [EE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(for_rc: 2, ee: true) %>) and [CE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(for_rc: 2) %>)
- [ ] Get confirmation from a production team member to deploy staging. Use `!oncall prod` if needed to find who's on call.
- [ ] On video call, [deploy] release [`<%= version.to_rc(2) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(2) %>.ee.0_amd64.deb) to [staging.gitlab.com]
    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e staging -v <%= version.to_rc(2) %>.ee.0
    ```
- [ ] Share the output of the migrations from the takeoff script in this issue via a snippet. Flag any migrations that take more than 5 minutes to run.
- [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc(2) %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
- [ ] Announce with an `@product-team` mention on the `#product` Slack channel: @product-team `<%= version.to_rc(2) %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
- [ ] Create a "QA Task" issue in the [gitlab-org/release/tasks](https://gitlab.com/gitlab-org/release/tasks) repo.
- [ ] Wait for the QA Task deadline to pass.
- [ ] Get confirmation from a production team member to deploy canary. Use `!oncall prod` if needed to find who's on call.
- [ ] On video call, [deploy] release [`<%= version.to_rc(2) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(2) %>.ee.0_amd64.deb) to [canary.gitlab.com]
    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e canary -v <%= version.to_rc(2) %>.ee.0
    ```
- [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc(2) %>` has been deployed to canary. Blog post draft: MERGE_REQUEST_URL
- [ ] Wait for confirmation from [`@bjgopinath`](https://gitlab.com/bjgopinath) that testing succeeded on canary and the release can proceed
- [ ] Get confirmation from a production team member to deploy production. Use `!oncall prod` if needed to find who's on call.
- [ ] If downtime is expected, publicly [announce the deployment] on Twitter and with the GitLab.com deploy alert banner in the `#production` channel, 1 hour in advance
    ```
    !broadcast --start X:Y --end A:B "We will deploying GitLab EE <%= version.to_rc(2) %> starting at X:Y. GitLab will be unavailable for Z minutes.
    For status updates, please follow https://twitter.com/GitLabStatus"
    ```
    ```
    !tweet "We will be deploying GitLab EE <%= version.to_rc(2) %> starting at X:Y UTC, 15 mins of downtime expected"
    ```
- [ ] On video call, [deploy] release [`<%= version.to_rc(2) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(2) %>.ee.0_amd64.deb) to GitLab.com
    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e production -v <%= version.to_rc(2) %>.ee.0
    ```
- [ ] Tweet in the `#production` channel that the deployment has finished:
      ```
      !tweet "GitLab EE <%= version.to_rc(2) %> has been deployed."
      ```
- [ ] Take notes of the time it took for the migrations to complete on the deployment to production.
    ```
    # On the takeoff repo
    bundle exec rake "follow_migrations[production]"
    ```
- [ ] From the [build pipeline], [manually publish public packages]
- [ ] Verify that packages appear on `packages.gitlab.com`: [EE & CE](https://packages.gitlab.com/app/gitlab/unstable/search?q=<%= version.to_rc(2) %>)
- [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
- [ ] Post a [tweet about] the `<%= version.to_rc(2) %>` release in the `#releases` channel:

    ```
    !tweet "GitLab <%= version.to_rc(2) %> is available: https://packages.gitlab.com/gitlab/unstable
    This is a release candidate, we'll release <%= version.to_minor %> on the 22nd of this month."
    ```
```

### 21st final RC

- Before 13:00 UTC:
  - Final RC is ready for tagging. Including changes at this stage requires signoff from VP of Eng.
    - [ ] Ensure tests are green on [CE stable branch]
    - [ ] Ensure tests are green on [EE stable branch]
    - [ ] Ensure tests are green on [Omnibus CE stable branch]
    - [ ] Ensure tests are green on [Omnibus EE stable branch]
    - [ ] Replace XX in the tasks below with the RC version number:
    - [ ] Tag the final RC version using the [`release` task],
        ```sh
        # In the release-tools project:
        bundle exec rake "release[<%= version.to_rc(21) %>]"
        ```
    - [ ] Check progress of [EE packages build] and [CE packages build]
    - [ ] Get confirmation from a production team member to deploy staging. Use `!oncall prod` if needed to find who's on call.
    - [ ] On video call, [deploy] release [`<%= version.to_rc(21) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(21) %>.ee.0_amd64.deb) to [staging.gitlab.com]
        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e staging -v <%= version.to_rc(21) %>.ee.0
        ```
    - [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc(21) %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
    - [ ] Announce with an `@product-team` mention on the `#product` Slack channel: @product-team `<%= version.to_rc(21) %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
    - [ ] Create a "QA Task" issue in the [gitlab-org/release/tasks](https://gitlab.com/gitlab-org/release/tasks) repo.
    - [ ] Wait for the QA Task deadline to pass.
    - [ ] Get confirmation from a production team member to deploy canary. Use `!oncall prod` if needed to find who's on call.
    - [ ] On video call, [deploy] release [`<%= version.to_rc(21) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(21) %>.ee.0_amd64.deb) to [canary.gitlab.com]
        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e canary -v <%= version.to_rc(21) %>.ee.0
        ```
    - [ ] Announce on the `#releases` Slack channels: `<%= version.to_rc(21) %>` has been deployed to canary. Blog post draft: MERGE_REQUEST_URL
    - [ ] Wait for confirmation from [`@bjgopinath`](https://gitlab.com/bjgopinath) that testing succeeded on canary and the release can proceed
    - [ ] Get confirmation from a production team member to deploy production. Use `!oncall prod` if needed to find who's on call.
    - [ ] Publicly [announce the deployment] on Twitter and with the GitLab.com deploy alert banner in the `#production` channel
        ```
        !broadcast --start X:Y --end A:B "We are currently deploying GitLab EE <%= version.to_rc(2) %>.
        For status updates, please follow https://twitter.com/GitLabStatus"
        ```
        * With downtime: 1 hour before
        ```
        !tweet "We will be deploying GitLab EE <%= version.to_rc(2) %> starting at X:Y UTC, 15 mins of downtime expected"
        ```
        * Without downtime: 15 minutes before
        ```
        !tweet "We are about to deploy GitLab EE <%= version.to_rc(2) %> starting at X:Y UTC"
        ```
    - [ ] On video call, [deploy] release [`<%= version.to_rc(21) %>`](https://packages.gitlab.com/gitlab/unstable/packages/ubuntu/xenial/gitlab-ee_<%= version.to_rc(21) %>.ee.0_amd64.deb) to GitLab.com
        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e production -v <%= version.to_rc(21) %>.ee.0
        ```
    - [ ] Tweet in the `#production` channel that the deployment has finished:
        ```
        !tweet "GitLab EE <%= version.to_rc(21) %> has been deployed."
        ```
    - [ ] From the [build pipeline], [manually publish public packages]
    - [ ] Verify that packages appear on `packages.gitlab.com`: [EE & CE](https://packages.gitlab.com/app/gitlab/unstable/search?q=<%= version.to_rc(21) %>)
    - [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
    - [ ] Post a [tweet about] the `<%= version.to_rc(21) %>` release in the `#releases` channel:

      ```
      !tweet "GitLab <%= version.to_rc(21) %> is available: https://packages.gitlab.com/gitlab/unstable
      This is a release candidate, we'll release <%= version.to_minor %> on the 22nd of this month."
      ```

- At 15:00 UTC:
  - [ ] If the final RC is not tagged and deployed by this time, notify the [Build Lead][Getting help]

- At 20:00 UTC:
  - [ ] If the final RC is not tagged and deployed by this time, notify the [VP of Engineering][Getting help]

### 22nd, the release day:

No new code is added to release that was not included in the last RC.
This way we ensure the release does not introduce new regressions.

- At 8:00 UTC, final release is ready for tagging (Including changes at this stage requires signoff from [VP of Eng.][Getting help]):
  - [ ] Ensure tests are green on [CE stable branch]
  - [ ] Ensure tests are green on [EE stable branch]
  - [ ] Ensure tests are green on [Omnibus CE stable branch]
  - [ ] Ensure tests are green on [Omnibus EE stable branch]
  - [ ] Sync stable branches: CE, EE, and Omnibus to `dev`, CE and Omnibus to `github`
  - [ ] Sync master branches to `dev` and `github`, as the CHANGELOG will be automatically updated on master during tagging
  - [ ] If needed, sync tags for dependencies (`gitlab-shell`, `gitlab-workhorse`, `gitlab-pages`, `gitaly`) to `dev` and `github` (when applicable. Builds should fail if this is needed.)
  - [ ] If at this time final release is not ready for tagging, notify the [CTO][Getting help]

- Before 10:00 UTC:
  - [ ] Tag the `<%= version.to_patch %>` version using the [`release` task]:

        ```sh
        # In the release-tools project:
        bundle exec rake "release[<%= version.to_patch %>]"
        ```
  - [ ] Check progress of [EE packages build] and [CE packages build]

- Before 12:00 UTC:
  - [ ] Get confirmation from a production team member to deploy staging. Use `!oncall prod` if needed to find who's on call.
  - [ ] On video call, [deploy] release [`<%= version.to_patch %>`](https://packages.gitlab.com/gitlab/pre-release/packages/ubuntu/xenial/gitlab-ee_<%= version.to_patch %>-ee.0_amd64.deb) to [staging.gitlab.com]

        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e staging -v <%= version.to_patch %>-ee.0
        ```
  - [ ] Announce on the `#releases` Slack channels: `<%= version.to_patch %>` has been deployed to staging. Blog post draft: MERGE_REQUEST_URL
  - [ ] Wait for confirmation from [`@bjgopinath`](https://gitlab.com/bjgopinath) that testing succeeded on staging and the release can proceed
  - [ ] Get confirmation from a production team member. Use `!oncall prod` if needed to find who's on call.
  - [ ] On video call, [deploy] release [`<%= version.to_patch %>`](https://packages.gitlab.com/gitlab/pre-release/packages/ubuntu/xenial/gitlab-ee_<%= version.to_patch %>-ee.0_amd64.deb) to [canary.gitlab.com]

        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e canary -v <%= version.to_patch %>-ee.0
        ```
  - [ ] Announce on the `#releases` Slack channels: `<%= version.to_patch %>` has been deployed to canary. Blog post draft: MERGE_REQUEST_URL
  - [ ] Wait for confirmation from [`@bjgopinath`](https://gitlab.com/bjgopinath) that testing succeeded on canary and the release can proceed
  - [ ] Get confirmation from a production team member to deploy production. Use `!oncall prod` if needed to find who's on call.
  - [ ] Publicly [announce the deployment] on Twitter and with the GitLab.com deploy alert banner in the `#production` channel
        ```
        !broadcast --start X:Y --end A:B "We are currently deploying GitLab EE <%= version.to_patch %>.
        For status updates, please follow https://twitter.com/GitLabStatus"
        ```
        * With downtime: 1 hour before
        ```
        !tweet "We will be deploying GitLab EE <%= version.to_patch %> starting at X:Y UTC, 15 mins of downtime expected"
        ```
        * Without downtime: 15 minutes before
        ```
        !tweet "We are about to deploy GitLab EE <%= version.to_patch %> starting at X:Y UTC"
        ```
  - [ ] On video call, [deploy] release [`<%= version.to_patch %>`](https://packages.gitlab.com/gitlab/pre-release/packages/ubuntu/xenial/gitlab-ee_<%= version.to_patch %>-ee.0_amd64.deb) to GitLab.com

        ```sh
        # In the takeoff project:
        bin/takeoff-deploy -e production -v <%= version.to_patch %>-ee.0
        ```
  - [ ] Tweet in the `#production` channel that the deployment has finished:
        ```
        !tweet "GitLab EE <%= version.to_patch %> has been deployed."
        ```
  - [ ] Create the first patch issue using the [`patch_issue` task]:

        ```sh
        # In the release-tools project:
        bundle exec rake "patch_issue[<%= version.next_patch %>]"
        ```
  - [ ] If at this point final release is not ready for public, notify the [CEO](https://about.gitlab.com/team/#sytses)

- At 15:00 UTC:
  - Make sure that neither packages nor blog post get published before that time without approval by the marketing team.
  - [ ] From the [build pipeline], [manually publish public packages]
  - [ ] Verify that packages appear on `packages.gitlab.com`: [EE](https://packages.gitlab.com/app/gitlab/gitlab-ee/search?q=<%= version.to_patch %>) / [CE](https://packages.gitlab.com/app/gitlab/gitlab-ce/search?q=<%= version.to_patch %>)
  - [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
  - [ ] Create the `<%= version.to_patch %>` version on https://version.gitlab.com
  - [ ] Ensure someone tweets about the `<%= version.to_patch %>` release in the `#releases` channel

[CE to EE]: https://gitlab.com/gitlab-org/gitlab-ee/merge_requests?label_name[]=CE+upstream&scope=all&state=all
[Creating RC1]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/release-candidates.md#creating-rc1
[CE stable branch]: https://gitlab.com/gitlab-org/gitlab-ce/commits/<%= version.stable_branch %>
[EE stable branch]: https://gitlab.com/gitlab-org/gitlab-ee/commits/<%= version.stable_branch(ee: true) %>
[Omnibus CE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch %>
[Omnibus EE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch(ee: true) %>
[announce the deployment]: https://gitlab.com/gitlab-org/takeoff/blob/master/doc/announce-a-deployment.md
[tweet about]: https://gitlab.com/gitlab-org/takeoff#announce-that-the-deploy-is-done
[`gitlab/unstable`]: https://packages.gitlab.com/gitlab/unstable
[`gitlab/gitlab-ee`]: https://packages.gitlab.com/gitlab/gitlab-ee
[`gitlab/gitlab-ce`]: https://packages.gitlab.com/gitlab/gitlab-ce
[Sync CE, EE, and Omnibus to `dev`]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/pro-tips.md#add-a-git-pdo-and-a-git-pdog-aliases
[Creating subsequent RCs]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/release-candidates.md#creating-subsequent-rcs
[Merging a CE stable branch into its EE counterpart]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/merge-ce-into-ee.md#merging-a-ce-stable-branch-into-its-ee-counterpart
[`release` task]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc%2Frake-tasks.md#releaseversion
[`patch_issue` task]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc%2Frake-tasks.md#patch_issueversion
[Merged MRs list]: https://gitlab.com/groups/gitlab-org/merge_requests?label_name%5B%5D=Pick+into+<%= version.to_minor %>&scope=all&sort=id_desc&state=merged
[deploy]: https://gitlab.com/gitlab-org/takeoff#deploying-gitlab
[staging.gitlab.com]: https://staging.gitlab.com/
[canary.gitlab.com]: https://canary.gitlab.com/
[manually publish public packages]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/publishing-packages.md
[build pipeline]: https://dev.gitlab.org/gitlab/omnibus-gitlab/pipelines?scope=tags
[Getting help]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/monthly.md#getting-help

/milestone %"<%= version.to_minor %>"
